// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model ActivityOfDeleteData {
  id        Int      @id @default(autoincrement())
  user      String   @db.VarChar(60)
  reason    String   @db.VarChar(60)
  module    String   @db.VarChar(60)
  createdAt DateTime @default(now())
  typeUser  String   @db.VarChar(60)
}

model Departments {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updateAt  DateTime?
  editedBy  String?   @db.VarChar(60)
  name      String    @db.VarChar(60)
  users     Users[]
}

// model TypeUser {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   name      String   @db.VarChar(60) // Receptionist, Housekeeper and Admin
//   users     Users?
// }

// model Privileges {
//   id        Int       @id @default(autoincrement())
//   createdAt DateTime  @default(now())
//   updateAt  DateTime?
//   name      String    @db.VarChar(60) // Receptionist, Housekeeper and Admin
//   users     Users?
// }

// model SectionsOfSystem {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   name      String
//   type      Int
//   users     Users?
// }

model SuperAdmin {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  password           String               @db.VarChar(60)
  fullName           String               @db.VarChar(50)
  createdAt          DateTime             @default(now())
  typeUser           String               @db.VarChar(20)
  updateAt           DateTime?
  SuperAdminOnHotels SuperAdminOnHotels[]
}

model Users {
  id                     Int             @id @default(autoincrement())
  email                  String          @unique
  password               String          @db.VarChar(60)
  fullName               String          @db.VarChar(50)
  lastName               String          @db.VarChar(50)
  createdAt              DateTime        @default(now())
  updateAt               DateTime?
  editedBy               String?         @db.VarChar(60)
  status                 String          @db.VarChar(50)
  phone                  String          @db.VarChar(10)
  typeUserId             Int
  department             Departments     @relation(fields: [departmentId], references: [id])
  departmentId           Int
  preferences            Hotels?         @relation(fields: [preferencesId], references: [id])
  preferencesId          Int?
  // sectionsToAccess SectionsOfSystem @relation(fields: [sectionsId], references: [id])
  // sectionsId       Int              @unique
  // privileges   Privileges  @relation(fields: [privilegesId], references: [id])
  // privilegesId Int         @unique
  hotels                 UsersOnHotels[]
  // activityOfDeleteData   ActivityOfDeleteData? @relation(fields: [activityOfDeleteDataId], references: [id])
  activityOfDeleteDataId Int?
}

model Guest {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  password     String         @db.VarChar(60)
  fullName     String         @db.VarChar(50)
  lastName     String         @db.VarChar(50)
  createdAt    DateTime       @default(now())
  updateAt     DateTime?
  company      String?        @db.VarChar(60)
  city         String
  comments     Comments[]
  emailForm    EmailForm[]
  RoomBookings RoomBookings[]
}

// model Categories {
//   id          Int       @id @default(autoincrement())
//   createdAt   DateTime  @default(now())
//   updateAt    DateTime?
//   name        String    @db.VarChar(60)
//   hotels      Hotels[]
//   editedBy String    @db.VarChar(60)
// }

model PlacesInterest {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updateAt   DateTime?
  name       String
  distance   String
  duration   String
  travelMode String
  hoteles    Hotels    @relation(fields: [hotelId], references: [id])
  hotelId    Int
}

model SuperAdminOnHotels {
  hotel      Hotels     @relation(fields: [hotelId], references: [id])
  hotelId    Int
  user       SuperAdmin @relation(fields: [userId], references: [id])
  userId     Int
  assignedAt DateTime   @default(now())
  assignedBy String     @db.VarChar(60)
  updateAt   DateTime?  @updatedAt

  @@id([hotelId, userId])
}

model UsersOnHotels {
  hotel      Hotels    @relation(fields: [hotelId], references: [id])
  hotelId    Int
  user       Users     @relation(fields: [userId], references: [id])
  userId     Int
  assignedAt DateTime  @default(now())
  assignedBy String    @db.VarChar(60)
  updateAt   DateTime? @updatedAt

  @@id([hotelId, userId])
}

model Hotels {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  updateAt           DateTime?
  name               String               @db.VarChar(60)
  ubication          String
  phone              String               @db.VarChar(10)
  // category           Categories           @relation(fields: [categoryId], references: [id])
  // categoryId         Int
  stars              Int
  facebook           String?              @db.VarChar(40)
  whatsapp           String?              @db.VarChar(15)
  instagram          String?              @db.VarChar(40)
  references         String
  googleMaps         String?              @db.VarChar(60)
  latitude           String?              @db.VarChar(10)
  longitude          String?              @db.VarChar(10)
  totalFloors        Int
  totalRooms         Int
  editedBy           String?              @db.VarChar(60)
  logoImage          String               @db.VarChar(60)
  imageUrl           String               @db.VarChar(60)
  pathDirImage       String               @db.VarChar(60)
  pathImageName      String               @db.VarChar(60)
  placeId            String
  // smoke              Boolean
  // facilityId       Facilities       @relation(fields: [facilitiesId], references: [id])
  // facilitiesId     Int
  // comment          Comments         @relation(fields: [commentId], references: [id])
  // commentId        Int
  placesOfInterest   PlacesInterest[]
  usersOnHotels      UsersOnHotels[]
  rooms              Rooms[]
  // roomsOnHotels    RoomsOnHotels[]
  users              Users[]
  comments           Comments[]
  // emailForm        EmailForm[]
  SuperAdminOnHotels SuperAdminOnHotels[]
  OnlyEmail          OnlyEmail[]
  EmailForm          EmailForm[]
  RoomTypeImages     RoomTypeImages[]
}

model Services {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updateAt        DateTime?
  name            String           @db.VarChar(60)
  description     String?
  icon            String           @db.LongText
  editedBy        String?          @db.VarChar(40)
  mainInformation Boolean
  ServicesOnRoom  ServicesOnRoom[]
}

model ServicesOnRoom {
  id         Int      @id @default(autoincrement())
  roomType   RoomType @relation(fields: [roomTypeId], references: [id])
  roomTypeId Int
  service    Services @relation(fields: [serviceId], references: [id])
  serviceId  Int
}

// model ServicesOnRoom {
//   room       Rooms     @relation(fields: [roomId], references: [id])
//   roomId     Int
//   service    Services  @relation(fields: [serviceId], references: [id])
//   serviceId  Int
//   assignedAt DateTime  @default(now())
//   assignedBy String    @db.VarChar(60)
//   updateAt   DateTime? @updatedAt

//   @@id([roomId, serviceId])
// }

model Benefits {
  id        Int       @id
  createdAt DateTime  @default(now())
  updateAt  DateTime?
  name      String
  altImage  String
  url       String
  text      String
  editedBy  String?
}

model Facilities {
  id        Int       @id
  createdAt DateTime  @default(now())
  updateAt  DateTime?
  altImage  String
  url       String
  editedBy  String?
  // Hotels    Hotels[]
}

model Promotions {
  id        Int       @id
  createdAt DateTime  @default(now())
  updateAt  DateTime?
  name      String
  altImage  String
  url       String
  text      String
  editedBy  String?
}

// model RoomsOnHotels {
//   room       Rooms     @relation(fields: [roomId], references: [id])
//   roomId     Int
//   hotel      Hotels    @relation(fields: [hotelId], references: [id])
//   hotelId    Int
//   assignedAt DateTime  @default(now())
//   assignedBy String
//   updateAt   DateTime? @updatedAt

//   @@id([roomId, hotelId])
// }

model Rooms {
  id                   Int            @id @default(autoincrement())
  createdAt            DateTime       @default(now())
  updatedAt            DateTime?
  floor                Int
  roomNumber           Int
  roomType             RoomType       @relation(fields: [roomTypeId], references: [id])
  roomTypeId           Int
  editedBy             String?        @db.VarChar(60)
  isBooking            Boolean        @default(false)
  bookedAt             String?        @db.VarChar(30)
  roomDetails          String         @default("Ninguno")
  roomDetailsEmergency Int            @default(1) @db.TinyInt
  hotel                Hotels         @relation(fields: [hotelId], references: [id])
  hotelId              Int
  roomStatus           RoomStatus     @relation(name: "RoomStatus", fields: [roomStatusId], references: [id])
  roomStatusId         Int
  lastRoomStatus       RoomStatus     @relation(name: "LastRoomStatus", fields: [lastRoomStatusId], references: [id])
  lastRoomStatusId     Int
  // servicesOnRoom   ServicesOnRoom[]
  RoomBookings         RoomBookings[]
}

model RoomType {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updateAt       DateTime?
  name           String           @db.VarChar(60)
  keyWord        String           @db.VarChar(4)
  editedBy       String?          @db.VarChar(60)
  title          String
  maxPeople      Int
  costPerNight   Float
  description    String
  smoke          Boolean
  room           Rooms[]
  ServicesOnRoom ServicesOnRoom[]
  RoomTypeImages RoomTypeImages[]
}

model RoomTypeImages {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updateAt   DateTime?
  pathDirect String    @db.VarChar(20)
  imageUrl   String
  editedBy   String    @db.VarChar(60)
  index      Int       @db.TinyInt
  roomType   RoomType  @relation(fields: [roomTypeId], references: [id])
  hotel      Hotels    @relation(fields: [hotelId], references: [id])
  roomTypeId Int
  hotelId    Int
}

model RoomStatus {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(30)
  createdAt       DateTime  @default(now())
  updateAt        DateTime?
  editedBy        String?   @db.VarChar(60)
  backgroundColor String    @db.VarChar(7)
  textColor       String    @db.VarChar(7)
  border          Boolean
  roomStatus      Rooms[]   @relation("RoomStatus")
  lastRoomStatus  Rooms[]   @relation("LastRoomStatus")
}

model RoomBookings {
  id                   Int     @id @default(autoincrement())
  detailsOfRoom        String
  detailsOfBooking     String
  checkIn              String  @db.VarChar(30)
  checkOut             String  @db.VarChar(30)
  isBreakfast          Boolean @default(false)
  wasBreakfastConsumed Int     @default(0)
  createdAt            String  @db.VarChar(30)
  updateAt             String? @db.VarChar(30)
  status               String  @default("En proceso")
  guest                Guest   @relation(fields: [guestId], references: [id])
  guestId              Int
  room                 Rooms   @relation(fields: [roomsId], references: [id])
  roomsId              Int
}

model Comments {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updateAt    DateTime?
  editedBy    String?   @db.VarChar(60)
  title       String?   @db.VarChar(60)
  description String
  starts      Int
  hotel       Hotels    @relation(fields: [hotelId], references: [id])
  hotelId     Int
  guest       Guest     @relation(fields: [guestId], references: [id])
  guestId     Int
}

model OnlyEmail {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  email     String
  hotel     Hotels   @relation(fields: [hotelId], references: [id])
  hotelId   Int
}

model EmailForm {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updateAt    DateTime?
  name        String    @db.VarChar(25)
  email       String
  message     String
  bookingType String
  bookingDays Int
  // hotelSelected Hotels    @relation(fields: [hotelsId], references: [id])
  // hotelsId      Int
  hotel       Hotels    @relation(fields: [hotelId], references: [id])
  hotelId     Int
  guest       Guest?    @relation(fields: [guestId], references: [id])
  guestId     Int?
}
